// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(15)
            {
                { typeof(global::ScString[]), 0 },
                { typeof(global::System.Collections.Generic.HashSet<uint>), 1 },
                { typeof(global::System.Collections.Generic.List<global::StageSequenceData>), 2 },
                { typeof(global::DataSet), 3 },
                { typeof(global::Dirichlet.Numerics.UInt128), 4 },
                { typeof(global::GameSaveData), 5 },
                { typeof(global::ScBigInteger), 6 },
                { typeof(global::ScFloat), 7 },
                { typeof(global::ScInt), 8 },
                { typeof(global::ScLong), 9 },
                { typeof(global::ScString), 10 },
                { typeof(global::ScUInt128), 11 },
                { typeof(global::StageSaveData), 12 },
                { typeof(global::StageSequenceData), 13 },
                { typeof(global::StrBaseData), 14 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ArrayFormatter<global::ScString>();
                case 1: return new global::MessagePack.Formatters.HashSetFormatter<uint>();
                case 2: return new global::MessagePack.Formatters.ListFormatter<global::StageSequenceData>();
                case 3: return new MessagePack.Formatters.DataSetFormatter();
                case 4: return new MessagePack.Formatters.Dirichlet.Numerics.UInt128Formatter();
                case 5: return new MessagePack.Formatters.GameSaveDataFormatter();
                case 6: return new MessagePack.Formatters.ScBigIntegerFormatter();
                case 7: return new MessagePack.Formatters.ScFloatFormatter();
                case 8: return new MessagePack.Formatters.ScIntFormatter();
                case 9: return new MessagePack.Formatters.ScLongFormatter();
                case 10: return new MessagePack.Formatters.ScStringFormatter();
                case 11: return new MessagePack.Formatters.ScUInt128Formatter();
                case 12: return new MessagePack.Formatters.StageSaveDataFormatter();
                case 13: return new MessagePack.Formatters.StageSequenceDataFormatter();
                case 14: return new MessagePack.Formatters.StrBaseDataFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class DataSetFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::DataSet>
    {


        private readonly global::MessagePack.Internal.AutomataDictionary ____keyMapping;
        private readonly byte[][] ____stringByteKeys;

        public DataSetFormatter()
        {
            this.____keyMapping = new global::MessagePack.Internal.AutomataDictionary()
            {
                { "StageSequenceData", 0 },
            };

            this.____stringByteKeys = new byte[][]
            {
                global::MessagePack.Internal.CodeGenHelpers.GetEncodedStringBytes("StageSequenceData"),
            };
        }

        public void Serialize(ref MessagePackWriter writer, global::DataSet value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteMapHeader(1);
            writer.WriteRaw(this.____stringByteKeys[0]);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::StageSequenceData>>().Serialize(ref writer, value.StageSequenceData, options);
        }

        public global::DataSet Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadMapHeader();
            var __StageSequenceData__ = default(global::System.Collections.Generic.List<global::StageSequenceData>);

            for (int i = 0; i < length; i++)
            {
                ReadOnlySpan<byte> stringKey = global::MessagePack.Internal.CodeGenHelpers.ReadStringSpan(ref reader);
                int key;
                if (!this.____keyMapping.TryGetValue(stringKey, out key))
                {
                    reader.Skip();
                    continue;
                }

                switch (key)
                {
                    case 0:
                        __StageSequenceData__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::StageSequenceData>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::DataSet();
            ____result.StageSequenceData = __StageSequenceData__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class GameSaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::GameSaveData>
    {


        public void Serialize(ref MessagePackWriter writer, global::GameSaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::ScInt>().Serialize(ref writer, value.gold, options);
        }

        public global::GameSaveData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __gold__ = default(global::ScInt);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __gold__ = formatterResolver.GetFormatterWithVerify<global::ScInt>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::GameSaveData();
            ____result.gold = __gold__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScBigIntegerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScBigInteger>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScBigInteger value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::System.Numerics.BigInteger>().Serialize(ref writer, value.value, options);
        }

        public global::ScBigInteger Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(global::System.Numerics.BigInteger);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = formatterResolver.GetFormatterWithVerify<global::System.Numerics.BigInteger>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScBigInteger(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScFloatFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScFloat>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScFloat value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.value);
        }

        public global::ScFloat Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScFloat();
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScIntFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScInt>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScInt value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.value);
        }

        public global::ScInt Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScInt(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScLongFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScLong>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScLong value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            writer.Write(value.value);
        }

        public global::ScLong Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(long);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = reader.ReadInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScLong(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScStringFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScString>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScString value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<byte[]>().Serialize(ref writer, value.value, options);
        }

        public global::ScString Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(byte[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = formatterResolver.GetFormatterWithVerify<byte[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScString(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class ScUInt128Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ScUInt128>
    {


        public void Serialize(ref MessagePackWriter writer, global::ScUInt128 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(1);
            formatterResolver.GetFormatterWithVerify<global::Dirichlet.Numerics.UInt128>().Serialize(ref writer, value.value, options);
        }

        public global::ScUInt128 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __value__ = default(global::Dirichlet.Numerics.UInt128);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __value__ = formatterResolver.GetFormatterWithVerify<global::Dirichlet.Numerics.UInt128>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ScUInt128(__value__);
            ____result.value = __value__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StageSaveDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::StageSaveData>
    {


        public void Serialize(ref MessagePackWriter writer, global::StageSaveData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(5);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.stageName, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<uint>>().Serialize(ref writer, value.coloredMinPoints, options);
            writer.Write(value.zoomValue);
            writer.Write(value.targetImageCenterX);
            writer.Write(value.targetImageCenterY);
        }

        public global::StageSaveData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __stageName__ = default(string);
            var __coloredMinPoints__ = default(global::System.Collections.Generic.HashSet<uint>);
            var __zoomValue__ = default(float);
            var __targetImageCenterX__ = default(float);
            var __targetImageCenterY__ = default(float);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __stageName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __coloredMinPoints__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.HashSet<uint>>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __zoomValue__ = reader.ReadSingle();
                        break;
                    case 3:
                        __targetImageCenterX__ = reader.ReadSingle();
                        break;
                    case 4:
                        __targetImageCenterY__ = reader.ReadSingle();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::StageSaveData();
            ____result.stageName = __stageName__;
            ____result.coloredMinPoints = __coloredMinPoints__;
            ____result.zoomValue = __zoomValue__;
            ____result.targetImageCenterX = __targetImageCenterX__;
            ____result.targetImageCenterY = __targetImageCenterY__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StageSequenceDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::StageSequenceData>
    {


        public void Serialize(ref MessagePackWriter writer, global::StageSequenceData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.seq);
            writer.Write(value.stageName);
        }

        public global::StageSequenceData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __seq__ = default(int);
            var __stageName__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __seq__ = reader.ReadInt32();
                        break;
                    case 1:
                        __stageName__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::StageSequenceData();
            ____result.seq = __seq__;
            ____result.stageName = __stageName__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class StrBaseDataFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::StrBaseData>
    {


        public void Serialize(ref MessagePackWriter writer, global::StrBaseData value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<global::ScString>().Serialize(ref writer, value.id, options);
            formatterResolver.GetFormatterWithVerify<global::ScString[]>().Serialize(ref writer, value.str, options);
        }

        public global::StrBaseData Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __id__ = default(global::ScString);
            var __str__ = default(global::ScString[]);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __id__ = formatterResolver.GetFormatterWithVerify<global::ScString>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __str__ = formatterResolver.GetFormatterWithVerify<global::ScString[]>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::StrBaseData();
            ____result.id = __id__;
            ____result.str = __str__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.Dirichlet.Numerics
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class UInt128Formatter : global::MessagePack.Formatters.IMessagePackFormatter<global::Dirichlet.Numerics.UInt128>
    {


        public void Serialize(ref MessagePackWriter writer, global::Dirichlet.Numerics.UInt128 value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            writer.Write(value.s0);
            writer.Write(value.s1);
        }

        public global::Dirichlet.Numerics.UInt128 Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __s0__ = default(ulong);
            var __s1__ = default(ulong);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __s0__ = reader.ReadUInt64();
                        break;
                    case 1:
                        __s1__ = reader.ReadUInt64();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::Dirichlet.Numerics.UInt128(__s0__);
            ____result.s0 = __s0__;
            ____result.s1 = __s1__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

